/*	==================== _delete ==================== 	Deletes node from the tree and rebalances 	tree if necessary. 	   Pre    tree initialized--null tree is OK.	          dltKey contains key of node to be deleted	          shorter indicates tree is shorter	   Post   node is deleted and its space recycled	          -or- if key not found, tree is unchanged 	   Return true if deleted; false if not found	          pointer to root*/NODE* _delete (AVL_TREE* tree,   NODE* root,                void*     dltKey, bool* shorter,               bool*     success){// Local Definitions 	NODE* dltPtr;	NODE* exchPtr;	NODE* newRoot;//	Statements 	if (!root)	   {	    *shorter = false;	    *success = false;	    return NULL;	   } // if 		if (tree->compare(dltKey, root->dataPtr) < 0)	    {	     root->left = _delete (tree,   	                           root->left, dltKey, 	                           shorter,    success);	     if (*shorter)	         root   = dltRightBal (root, shorter);	    } // if less 	else if (tree->compare(dltKey, root->dataPtr) > 0)	    {	     root->right = _delete (tree,    	                            root->right, dltKey,	                            shorter,     success);	     if (*shorter)	         root = dltLeftBal (root, shorter);	    } // if greater 	else	    // Found equal node 	    {	     dltPtr = root;	     if (!root->right)	         // Only left subtree 	         {	          newRoot  = root->left;	          *success = true;	          *shorter = true;	          free (dltPtr);	          return newRoot;              // base case 	         } // if true 	     else	         if (!root->left)	             // Only right subtree 	             {	              newRoot  = root->right;	              *success = true;	              *shorter = true;	              free (dltPtr);	              return newRoot;         // base case	            } // if 	         else	             // Delete Node has two subtrees 	             {	              exchPtr = root->left;	              while (exchPtr->right)	                  exchPtr = exchPtr->right;	              root->dataPtr = exchPtr->dataPtr;	              root->left = _delete (tree,  	                    root->left, exchPtr->dataPtr,	                    shorter,    success);	              if (*shorter)	                  root = dltRightBal (root, shorter); 	             } // else 	    } // equal node 	return root; }	// _delete 