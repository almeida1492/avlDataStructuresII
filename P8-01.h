#define LH +1                          // Left High #define EH  0                          // Even High #define RH -1                          // Right High //	Structure Declarations typedef struct avl_node{	 void*        dataPtr;	 struct avl_node* left;	 int          bal;	 struct avl_node* right;	} AVL_NODE;typedef struct{	 int    count;	 int   (*compare) (void* argu1, void* argu2);	 AVL_NODE*   root;	} AVL_TREE;	//	Prototype Declarations 	AVL_TREE* AVL_Create (int (*compare)(void* argu1, void* argu2));	AVL_TREE* AVL_Destroy (AVL_TREE* tree);	bool  AVL_Insert   (AVL_TREE* tree,  void* dataInPtr);	bool  AVL_Delete   (AVL_TREE* tree,  void* dltKey);	void* AVL_Retrieve (AVL_TREE* tree,  void* keyPtr);	void  AVL_Traverse (AVL_TREE* tree,	 void (*process)(void* dataPtr));	int  AVL_Count     (AVL_TREE* tree);	bool AVL_Empty     (AVL_TREE* tree);	bool AVL_Full      (AVL_TREE* tree);	static AVL_NODE* _avl_insert (AVL_TREE* tree, AVL_NODE* root, AVL_NODE* newPtr, bool* taller);	static AVL_NODE* _avl_delete (AVL_TREE* tree, AVL_NODE* root, void* dltKey, bool* shorter, bool* success);	static void* _avl_retrieve (AVL_TREE* tree, void* keyPtr, AVL_NODE* root); 	static void _avl_traversal (AVL_NODE* root, void (*process)(void* dataPtr));	static AVL_NODE* rotateLeft   (AVL_NODE* root);	static AVL_NODE* rotateRight  (AVL_NODE* root);	static AVL_NODE* insLeftBal  (AVL_NODE* root, bool* taller);	static AVL_NODE* insRightBal (AVL_NODE* root, bool* taller);  	static AVL_NODE* dltLeftBal   (AVL_NODE* root, bool* shorter);	static AVL_NODE* dltRightBal  (AVL_NODE* root, bool* shorter);	static void _avl_destroy      (AVL_NODE* root);