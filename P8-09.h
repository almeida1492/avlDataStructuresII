/*	=================== dltRightBal ==================  	The tree is shorter after a delete on the left. This 	function adjusts the balance factors and rotates the tree 	to the left if necessary.	   Pre     tree shorter 	   Post    Balance factors reset-balance restored 	   Returns potentially new root */NODE* dltRightBal (NODE* root, bool* shorter){//	Local Definitions 	NODE* rightTree;	NODE* leftTree;	//	Statements 	switch (root->bal)	    {	     case LH:       // Deleted Left--Now balanced 	          root->bal  = EH;	          break;	          	     case EH:       // Now Right high 	          root->bal  = RH;	          *shorter   = false;	          break;	          	     case RH:       // Right High - Rotate Left	          rightTree = root->right;	          if (rightTree->bal == LH)	              // Double rotation required 	              {	               leftTree  = rightTree->left;	               	               switch (leftTree->bal)	                   {	                    case LH: rightTree->bal = RH;	                             root->bal      = EH;	                             break;	                    case EH: root->bal      = EH;	                             rightTree->bal = EH;	                             break;	                    case RH: root->bal      = LH;	                             rightTree->bal = EH;	                             break;	                   } // switch 	                   	               leftTree->bal = EH;	               	               // Rotate Right then Left 	               root->right = 	                      rotateRight (rightTree);	               root = rotateLeft  (root);	              } // if rightTree->bal == LH 	          else	              {	               // Single Rotation Only 	               switch (rightTree->bal)	                   {	                    case LH:	                    case RH: root->bal      = EH;	                             rightTree->bal = EH;	                             break;	                    case EH: root->bal      = RH;	                             rightTree->bal = LH;	                             *shorter       = false;	                             break;	                   } // switch rightTree->bal 	               root = rotateLeft (root);	              } // else 	    } // switch 	return root;}	// dltRightBal 